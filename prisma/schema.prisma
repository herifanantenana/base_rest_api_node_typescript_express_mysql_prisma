// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    USER
}

enum OrderEventStatus {
    PENDING
    ACCEPTED
    OUT_FOR_DELIVERY
    DELIVERED
    CANCELLED
}

model User {
    id                       Int      @id @default(autoincrement())
    name                     String
    email                    String   @unique
    password                 String
    role                     Role     @default(USER)
    defaultShippingAddressId Int?
    defaultBillingAddressId  Int?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt

    addresses Address[]
    cartItems CartItem[]
    orders    Order[]

    @@map("users")
}

model Address {
    id        Int      @id @default(autoincrement())
    lineOne   String
    lineTwo   String?
    city      String
    country   String
    pincode   String
    userId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("addresses")
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String
    description String   @db.Text
    price       Decimal
    tags        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    cartItems     CartItem[]
    orderProducts OrderProduct[]

    @@map("products")
}

model CartItem {
    id        Int      @id @default(autoincrement())
    userId    Int
    productId Int
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id])
    product Product @relation(fields: [productId], references: [id])

    @@map("cart_items")
}

model Order {
    id        Int              @id @default(autoincrement())
    userId    Int
    netAmount Decimal
    address   String
    status    OrderEventStatus @default(PENDING)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    user User @relation(fields: [userId], references: [id])

    orderProducts OrderProduct[]
    orderEvents   OrderEvent[]

    @@map("orders")
}

model OrderProduct {
    id        Int      @id @default(autoincrement())
    orderId   Int
    productId Int
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    order    Order   @relation(fields: [orderId], references: [id])
    products Product @relation(fields: [productId], references: [id])

    @@map("order_products")
}

model OrderEvent {
    id        Int              @id @default(autoincrement())
    orderId   Int
    status    OrderEventStatus @default(PENDING)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    order Order @relation(fields: [orderId], references: [id])

    @@map("order_events")
}
